<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.mytrip.repository.FriendshipRepository">

    <!-- 친구추가 -->
    <insert id="sendFriendRequest">
        insert into friendship (to_user_id, from_user_id, friend_status, friendship_date)
        values (#{toUserId}, #{fromUserId}, #{friendStatus}, NOW())
    </insert>

    <!-- 수락 -->
    <update id="acceptFriendRequest">
        update friendship
        set friend_status = '수락',friendship_date=now()
        where to_user_id = #{toUserId} and from_user_id = #{fromUserId} and friend_status = '대기'
    </update>

    <!-- 거절 -->
    <update id="rejectFriendRequest">
        update friendship
        set friend_status='거절'
        WHERE to_user_id = #{toUserId} AND from_user_id = #{fromUserId} AND friend_status = '대기'
    </update>

    <!-- 특정 친구 요청 조회 -->
    <select id="findFriendRequest" resultType="com.lec.spring.mytrip.domain.Friendship">
        select * from friendship
        where to_user_id = #{toUserId} and from_user_id = #{fromUserId}
    </select>

    <select id="countAcceptedFriends" resultType="int">
        select count(*) from friendship
        where (to_user_id = #{userId} or from_user_id = #{userId})
        and friend_status = '수락'
    </select>

    <!-- 친구 목록 조회 (User 정보 포함) -->
    <!-- 친구 목록 조회 (User 정보 포함) -->
    <select id="AcceptedFriends" resultMap="FriendshipUserResultMap">
        select f.*,
               u1.user_id as from_user_id, u1.user_name as from_user_name, u1.user_profile as from_user_profile,
               u2.user_id as to_user_id, u2.user_name as to_user_name, u2.user_profile as to_user_profile
        from friendship f
                 join user u1 on u1.user_id = f.from_user_id
                 join user u2 on u2.user_id = f.to_user_id
        where (f.to_user_id = #{userId} or f.from_user_id = #{userId})
          and f.friend_status = '수락'

    </select>


    <select id="requestView" resultMap="FriendshipUserResultMap">
        select f.*,
               u1.user_id as from_user_id, u1.user_name as from_user_name, u1.user_profile as from_user_profile,
               u2.user_id as to_user_id, u2.user_name as to_user_name, u2.user_profile as to_user_profile
        from friendship f
                 join user u1 on u1.user_id = f.from_user_id
                 join user u2 on u2.user_id = f.to_user_id
        where (f.to_user_id = #{userId} or f.from_user_id = #{userId})
          and f.friend_status = '대기'
    </select>




    <delete id="delete">
        DELETE FROM friendship
        WHERE to_user_id = #{toUserId} AND from_user_id = #{fromUserId}
    </delete>

    <!-- 결과 맵핑 -->
    <resultMap id="FriendshipUserResultMap" type="com.lec.spring.mytrip.domain.Friendship">
        <result property="requestFriendId" column="request_friend_id"/>
        <result property="toUserId" column="to_user_id"/>
        <result property="fromUserId" column="from_user_id"/>
        <result property="friendStatus" column="friend_status"/>
        <result property="friendshipDate" column="friendship_date"/>

        <!-- fromUserName과 toUserName 추가 -->
        <result property="fromUserName" column="from_user_name"/>
        <result property="toUserName" column="to_user_name"/>

        <!-- User 객체 매핑 (fromUser와 toUser) -->
        <association property="fromUser" javaType="com.lec.spring.mytrip.domain.User">
            <result property="id" column="from_user_id"/>
            <result property="name" column="from_user_name"/>
            <result property="profile" column="from_user_profile"/>
        </association>

        <association property="toUser" javaType="com.lec.spring.mytrip.domain.User">
            <result property="id" column="to_user_id"/>
            <result property="name" column="to_user_name"/>
            <result property="profile" column="to_user_profile"/>
        </association>
    </resultMap>


</mapper>